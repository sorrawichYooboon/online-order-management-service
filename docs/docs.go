// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orders": {
            "get": {
                "description": "Returns paginated list of orders with items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get all orders with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 10,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "example": "desc",
                        "description": "Sort direction",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Order"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create orders with multiple items concurrently and transactionally",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create multiple orders",
                "parameters": [
                    {
                        "description": "Order creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CreateOrderRequestDTO"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Partial success",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrdersResponseDTO"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrdersResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    }
                }
            }
        },
        "/orders/{order_id}": {
            "get": {
                "description": "Retrieves full order detail by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get an order by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 1,
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    }
                }
            }
        },
        "/orders/{order_id}/status": {
            "put": {
                "description": "Transactionally update order status by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update the status of an order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New order status (PENDING, PAID, SHIPPED, CANCELED)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderStatusRequestDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httperror.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Order": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.OrderItem"
                    }
                },
                "status": {
                    "type": "string"
                },
                "totalAmount": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "domain.OrderItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "orderID": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "productName": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateOrderItemDTO": {
            "type": "object",
            "required": [
                "price",
                "product_name",
                "quantity"
            ],
            "properties": {
                "price": {
                    "type": "number",
                    "minimum": 0,
                    "example": 19.99
                },
                "product_name": {
                    "type": "string",
                    "example": "Wireless Mouse"
                },
                "quantity": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dto.CreateOrderRequestDTO": {
            "type": "object",
            "required": [
                "customer_name",
                "items"
            ],
            "properties": {
                "customer_name": {
                    "type": "string",
                    "example": "Alice Smith"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateOrderItemDTO"
                    }
                }
            }
        },
        "dto.CreateOrdersResponseDTO": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.OrderInsertResultDTO"
                    }
                },
                "summary": {
                    "$ref": "#/definitions/dto.OrderInsertSummaryDTO"
                }
            }
        },
        "dto.OrderInsertResultDTO": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "order_id": {
                    "type": "integer"
                }
            }
        },
        "dto.OrderInsertSummaryDTO": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer"
                },
                "success": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "dto.UpdateOrderStatusRequestDTO": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "PENDING",
                        "PAID",
                        "SHIPPED",
                        "CANCELED"
                    ],
                    "example": "PAID"
                }
            }
        },
        "httperror.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Online Order Management Service API",
	Description:      "KKP Interview - API for managing online orders and order items",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
